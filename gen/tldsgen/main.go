package main

import (
	"bufio"
	"errors"
	"fmt"
	"log"
	"net/http"
	"os"
	"regexp"
	"sort"
	"strings"
	"sync"
	"text/template"
)
// 分别从iana和pubsuffix两处拉取顶级域名名单---> tlds []string
// 涉及到去重和对拉取的内容进行过滤(两处资源中包含注释等其他信息) -->  map[string]bool  reg
const (
	path            = "tlds.go"
	sourceIana      = "https://data.iana.org/TLD/tlds-alpha-by-domain.txt"
	sourcePubsuffix = "https://publicsuffix.org/list/effective_tld_names.dat"
	ianaPat         = `^[^#]+$`
	pubsuffixPat    = `^[^/.]+$`
)

var tldsTmpl = template.Must(template.New("tlds").Parse(`// Generated by tldsgen

package extraURLs

// TLDs维护了一个顶级域名的有序集合
//
// 资源地址:{{range $_, $url := .URLs}}
//  * {{$url}}{{end}}
var TLDs = []string{
{{range $_, $tld := .TLDs}}` + "\t`" + `{{$tld}}` + "`" + `,
{{end}}}
`))

func handleTlds(tld string) string {
	tld = strings.ToLower(tld)
	if strings.HasPrefix(tld,"xn--") {
		return ""
	}
	return tld
}

func fetchFromURL(wg *sync.WaitGroup,url,pat string,tldSet map[string]bool) {
	defer wg.Done()

	resp, err := http.Get(url)
	if err == nil && resp.StatusCode >= 400 {
		err = errors.New(resp.Status)
	}
	if err != nil {
		panic(fmt.Errorf("%s:%s",url,err))
	}
	defer resp.Body.Close()

	scanner := bufio.NewScanner(resp.Body)
	re := regexp.MustCompile(pat)
	for scanner.Scan() {
		line := scanner.Text()
		tld := re.FindString(line)
		tld = handleTlds(tld)
		if tld == "" {
			continue
		}
		tldSet[tld] = true
	}
	if err := scanner.Err(); err != nil {
		panic(fmt.Errorf("%s: %s", url, err))
	}
}
func getTlds()(urls []string,tlds []string){
	tldSet := make(map[string]bool)
	var wg sync.WaitGroup
	fetchUrlWorker := func(url, pat string) {
		urls = append(urls, url)
		log.Printf("fetching url: %s",url)
		wg.Add(1)
		go fetchFromURL(&wg,url,pat,tldSet)
	}

	fetchUrlWorker(sourceIana,ianaPat)
	fetchUrlWorker(sourcePubsuffix,pubsuffixPat)
	wg.Wait()

	for tld := range tldSet {
		fmt.Println(tld)
		tlds = append(tlds, tld)
	}

	sort.Strings(tlds)
	return
}

func writeTldsFile(urls []string,tlds []string) error{
	file, err := os.Create(path)
	if err != nil {
		panic(err)
	}
	defer file.Close()
	return tldsTmpl.Execute(file, struct {
		TLDs []string
		URLs []string
	}{
		TLDs: tlds,
		URLs: urls,
	})
}

func main() {
	urls, tlds := getTlds()
	writeTldsFile(urls, tlds)
}